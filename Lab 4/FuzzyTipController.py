# -*- coding: utf-8 -*-
"""ece449_lab04_1665264_zamam.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZJq6JdQTanhoosXP9U3UceMDRljOYrv6
"""

!pip install scikit-fuzzy
!pip install EasyGA

"""We first import necessary libraries"""

import numpy as np
import skfuzzy as fuzz
from skfuzzy import control as ctrl
from sklearn.base import BaseEstimator, TransformerMixin
from sklearn.pipeline import Pipeline
from sklearn.base import BaseEstimator
from sklearn.model_selection import cross_val_score
from sklearn.tree import DecisionTreeClassifier
from sklearn.tree import DecisionTreeRegressor

"""We create control system for food quality, this is done outside the transformer to make it easier to change rules"""

# Define input and output variables for Simulation 1: Determine food quality
temperature = ctrl.Antecedent(np.linspace(0, 10, 11), 'temperature')
flavor = ctrl.Antecedent(np.linspace(0, 10, 11), 'flavor')
portion_size = ctrl.Antecedent(np.linspace(0, 10, 11), 'portion_size')
food_quality = ctrl.Consequent(np.linspace(0, 10, 11), 'food_quality')

# Manually define membership functions for 'flavor'
flavor['bland'] = fuzz.trimf(flavor.universe, [0, 0, 5])
flavor['average'] = fuzz.trimf(flavor.universe, [0, 5, 10])
flavor['delicious'] = fuzz.trimf(flavor.universe, [5, 10, 10])

# Manually define membership functions for 'temperature'
temperature['cold'] = fuzz.trimf(temperature.universe, [0, 0, 5])
temperature['medium'] = fuzz.trimf(temperature.universe, [0, 5, 10])
temperature['hot'] = fuzz.trimf(temperature.universe, [5, 10, 10])

# Manually define membership functions for 'portion_size'
portion_size['small'] = fuzz.trimf(portion_size.universe, [0, 0, 5])
portion_size['medium'] = fuzz.trimf(portion_size.universe, [0, 5, 10])
portion_size['large'] = fuzz.trimf(portion_size.universe, [5, 10, 10])

# Manually define membership functions for 'food_quality'
food_quality['poor'] = fuzz.trimf(food_quality.universe, [0, 0, 5])
food_quality['average'] = fuzz.trimf(food_quality.universe, [0, 5, 10])
food_quality['good'] = fuzz.trimf(food_quality.universe, [5, 10, 10])

# Rules for Food Quality "good"
rule1_food = ctrl.Rule((temperature['medium'] | temperature['hot']) & flavor['delicious'] & (portion_size['medium'] | portion_size['large']), food_quality['good'])

# Rules for Food Quality "average"
rule2_food = ctrl.Rule((temperature['cold'] | temperature['medium']|temperature['hot']) & flavor['average'] & (portion_size['small'] | portion_size['medium'] | portion_size['large']), food_quality['average'])
rule3_food = ctrl.Rule((temperature['cold']) & flavor['delicious'] & (portion_size['small']|portion_size['medium']|portion_size['large']), food_quality['average'])
rule4_food = ctrl.Rule(temperature['hot'] & flavor['bland'] & portion_size['large'], food_quality['average'])
rule5_food = ctrl.Rule(temperature['hot'] & flavor['delicious'] & portion_size['small'], food_quality['average'])
rule6_food = ctrl.Rule(temperature['medium'] & flavor['delicious'] & portion_size['small'], food_quality['average'])

# Rules for Food Quality "poor"
rule7_food = ctrl.Rule((temperature['cold'] | temperature['medium']) & flavor['bland'] & (portion_size['small'] | portion_size['medium'] | portion_size['large']), food_quality['poor'])
rule8_food = ctrl.Rule(temperature['hot'] & flavor['bland'] & (portion_size['small']|portion_size['medium']), food_quality['poor'])


food_ctrl = ctrl.ControlSystem([ rule1_food, rule2_food,rule3_food,rule4_food, rule5_food,rule6_food,rule7_food, rule8_food])

"""We create control system for service quality"""

# Define input and output variables
attentiveness = ctrl.Antecedent(np.linspace(0, 10, 11), 'attentiveness')
friendliness = ctrl.Antecedent(np.linspace(0, 10, 11), 'friendliness')
speed = ctrl.Antecedent(np.linspace(0, 10, 11), 'speed')
service_quality = ctrl.Consequent(np.linspace(0, 10, 11), 'service_quality')

# Manually define membership functions for 'attentiveness'
attentiveness['low'] = fuzz.trimf(attentiveness.universe, [0, 0, 5])
attentiveness['average'] = fuzz.trimf(attentiveness.universe, [0, 5, 10])
attentiveness['high'] = fuzz.trimf(attentiveness.universe, [5, 10, 10])

# Manually define membership functions for 'friendliness'
friendliness['low'] = fuzz.trimf(friendliness.universe, [0, 0, 5])
friendliness['average'] = fuzz.trimf(friendliness.universe, [0, 5, 10])
friendliness['high'] = fuzz.trimf(friendliness.universe, [5, 10, 10])

# Manually define membership functions for 'speed'
speed['slow'] = fuzz.trimf(speed.universe, [0, 0, 5])
speed['average'] = fuzz.trimf(speed.universe, [0, 5, 10])
speed['fast'] = fuzz.trimf(speed.universe, [5, 10, 10])

service_quality['poor'] = fuzz.trimf(service_quality.universe, [0, 0, 5])
service_quality['average'] = fuzz.trimf(service_quality.universe, [0, 5, 10])
service_quality['good'] = fuzz.trimf(service_quality.universe, [5, 10, 10])

# Generate rules
rule1_service = ctrl.Rule((attentiveness['low']|attentiveness['average']) & (friendliness['low']) & (speed['slow']|speed['average']), service_quality['poor'])
rule2_service = ctrl.Rule(attentiveness['low'] & (friendliness['average']) & speed['slow'], service_quality['poor'])
rule3_service = ctrl.Rule((attentiveness['high']) & (friendliness['average']|friendliness['low'])& speed['slow'], service_quality['poor'])
rule4_service = ctrl.Rule((attentiveness['low']) & friendliness['high']& speed['slow'], service_quality['poor'])

rule5_service = ctrl.Rule(attentiveness['average'] & friendliness['average'] & (speed['slow']|speed['average']), service_quality['average'])
rule6_service = ctrl.Rule(attentiveness['average'] & friendliness['high'] & speed['slow'], service_quality['average'])
rule7_service = ctrl.Rule((attentiveness['high']) & friendliness['low']& (speed['fast']|speed['average']), service_quality['average'])
rule8_service = ctrl.Rule((attentiveness['low']) & (friendliness['high']|friendliness['average'])& (speed['average']|speed['fast']), service_quality['average'])
rule9_service = ctrl.Rule((attentiveness['low']|attentiveness['average']) & friendliness['low']& speed['fast'], service_quality['average'])

rule10_service = ctrl.Rule((attentiveness['average']|attentiveness['high']) & friendliness['high']& (speed['average']|speed['fast']), service_quality['good'])
rule11_service = ctrl.Rule((attentiveness['high']) & friendliness['average']& (speed['fast']|speed['average']), service_quality['good'])
rule12_service = ctrl.Rule((attentiveness['average']) & friendliness['average']& speed['fast'], service_quality['good'])
rule13_service = ctrl.Rule(attentiveness['high'] & friendliness['high'] & speed['slow'], service_quality['good'])

# Create a control system
service_quality_ctrl = ctrl.ControlSystem([rule1_service, rule2_service, rule3_service,rule4_service, rule5_service,rule6_service, rule7_service,rule8_service,rule9_service,rule10_service,rule11_service,rule12_service,rule13_service])

"""Create control system for tipping FISM, two inputs ('food quality' and 'service quality') and the output is the recommended 'tip'"""

# Define input and output variables for tipping
food_quality_antecedent = ctrl.Antecedent(np.linspace(0, 10, 11), 'food_quality')
service_quality_antecedent = ctrl.Antecedent(np.linspace(0, 10, 11), 'service_quality')

# Manually define membership functions for 'food_quality_antecedent'
food_quality_antecedent['poor'] = fuzz.trimf(food_quality_antecedent.universe, [0, 0, 5])
food_quality_antecedent['average'] = fuzz.trimf(food_quality_antecedent.universe, [0, 5, 10])
food_quality_antecedent['good'] = fuzz.trimf(food_quality_antecedent.universe, [5, 10, 10])

# Manually define membership functions for 'service_quality_antecedent'
service_quality_antecedent['poor'] = fuzz.trimf(service_quality_antecedent.universe, [0, 0, 5])
service_quality_antecedent['average'] = fuzz.trimf(service_quality_antecedent.universe, [0, 5, 10])
service_quality_antecedent['good'] = fuzz.trimf(service_quality_antecedent.universe, [5, 10, 10])

# Define input and output variables for tipping
tip = ctrl.Consequent(np.linspace(0, 30, 31), 'tip')

# Define linguistic terms for tip
tip['low'] = fuzz.trimf(tip.universe, [0, 5, 10])  # Example: Low tip ranges from 0% to 10%
tip['medium'] = fuzz.trimf(tip.universe, [10, 15, 20])  # Example: Medium tip ranges from 10% to 20%
tip['high'] = fuzz.trimf(tip.universe, [20, 25, 30])  # Example: High tip ranges from 20% to 30%

# Create the tipping control system based on the outputs of the two simulations

rule1_tip = ctrl.Rule(food_quality_antecedent['poor'] | service_quality_antecedent['poor'], tip['low'])
rule2_tip = ctrl.Rule(food_quality_antecedent['average'] & service_quality_antecedent['average'], tip['medium'])
rule3_tip = ctrl.Rule(food_quality_antecedent['average'] & service_quality_antecedent['good'], tip['high'])
rule4_tip = ctrl.Rule(food_quality_antecedent['good'] & service_quality_antecedent['average'], tip['high'])
rule5_tip = ctrl.Rule(food_quality_antecedent['good'] & service_quality_antecedent['good'], tip['high'])

tipping_ctrl = ctrl.ControlSystem([rule1_tip, rule2_tip, rule3_tip, rule4_tip, rule5_tip])

"""Define functions for easier input prompting"""

def get_temperature():
    while True:
        try:
            temperature_value = float(input("Enter temperature (0-10): "))
            if 0 <= temperature_value <= 10:
                return temperature_value
            else:
                print("Invalid temperature value. Please enter a value between 0 and 10.")
        except ValueError:
            print("Invalid input. Please enter a numeric value.")

def get_flavor():
    while True:
        try:
            flavor_value = float(input("Enter flavor (0-10): "))
            if 0 <= flavor_value <= 10:
                return flavor_value
            else:
                print("Invalid flavor value. Please enter a value between 0 and 10.")
        except ValueError:
            print("Invalid input. Please enter a numeric value.")

def get_portion_size():
    while True:
        try:
            portion_size_value = float(input("Enter portion size (0-10): "))
            if 0 <= portion_size_value <= 10:
                return portion_size_value
            else:
                print("Invalid portion size value. Please enter a value between 0 and 10.")
        except ValueError:
            print("Invalid input. Please enter a numeric value.")

def get_attentiveness():
    while True:
        try:
            temperature_value = float(input("Enter attentiveness (0-10): "))
            if 0 <= temperature_value <= 10:
                return temperature_value
            else:
                print("Invalid temperature value. Please enter a value between 0 and 10.")
        except ValueError:
            print("Invalid input. Please enter a numeric value.")

def get_friendliness():
    while True:
        try:
            flavor_value = float(input("Enter friendliness (0-10): "))
            if 0 <= flavor_value <= 10:
                return flavor_value
            else:
                print("Invalid flavor value. Please enter a value between 0 and 10.")
        except ValueError:
            print("Invalid input. Please enter a numeric value.")

def get_speed():
    while True:
        try:
            portion_size_value = float(input("Enter speed (0-10): "))
            if 0 <= portion_size_value <= 10:
                return portion_size_value
            else:
                print("Invalid speed value. Please enter a value between 0 and 10.")
        except ValueError:
            print("Invalid input. Please enter a numeric value.")

def get_conf():
    while True:
        try:
            cont = input("Would you like to continue with more restaurants (T/F): ").strip().upper()
            if cont == 'T':
                return True
            elif cont == 'F':
                return False
            else:
                print("Invalid input. Please enter T or F.")
        except ValueError:
            print("Invalid input. Please enter T or F.")

"""We encapsulate out control variables (service_quality, food_quality, tipping) in a FuzzyLogicTransformer class. This is also needed for sklearn pipeline method.

Since no training occurs, the fit method is empty. Instead we use the transform method with takes input as a dictionary mapping inputs to the corresponding values. This is handled in get_user_input function.

In transform, we redirect user input to the first stage FISMs for food quality and service quality. The outputs of these 2 are then redirected to the final tipping FISM.
"""

class FuzzyLogicTransformer(BaseEstimator, TransformerMixin):
    def __init__(self, food_ctrl, service_quality_ctrl, tipping_ctrl):
        self.food_ctrl = food_ctrl
        self.service_quality_ctrl = service_quality_ctrl
        self.tipping_ctrl = tipping_ctrl

    def fit(self, X, y=None):
        return self

    def transform(self, X):
        food_q = ctrl.ControlSystemSimulation(self.food_ctrl)
        service_q = ctrl.ControlSystemSimulation(self.service_quality_ctrl)
        tipping_system = ctrl.ControlSystemSimulation(self.tipping_ctrl)

        food_q.input['temperature'] = X['temperature']
        food_q.input['flavor'] = X['flavor']
        food_q.input['portion_size'] = X['portion_size']

        service_q.input['attentiveness'] = X['attentiveness']
        service_q.input['friendliness'] = X['friendliness']
        service_q.input['speed'] = X['speed']
        food_q.compute()
        service_q.compute()

        tipping_system.input['food_quality'] = food_q.output['food_quality']
        tipping_system.input['service_quality'] = service_q.output['service_quality']
        tipping_system.compute()

        tip_amount = tipping_system.output['tip']

        return np.array([tip_amount])

def get_user_input():
    user_input = {
        'temperature': get_temperature(),
        'flavor': get_flavor(),
        'portion_size': get_portion_size(),
        'attentiveness': get_attentiveness(),
        'friendliness': get_friendliness(),
        'speed': get_speed()
    }
    return user_input

pipeline = Pipeline([
    ('fuzzy_logic', FuzzyLogicTransformer(food_ctrl, service_quality_ctrl, tipping_ctrl))
])

cont = True
while cont:
    user_data = get_user_input()
    tip_amount = pipeline.transform(user_data)
    print("Recommended Tip Amount: {:.2f}%".format(tip_amount[0]))
    cont = get_conf()
print("----------Exited----------")

"""Loop prompting user for input and printing recommended tip until the user is done."""